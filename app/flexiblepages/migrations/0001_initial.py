# Generated by Django 5.1.6 on 2025-02-17 16:25

import django.db.models.deletion
import wagtail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('nest', '__first__'),
        ('wagtailcore', '0094_alter_page_locale'),
    ]

    operations = [
        migrations.CreateModel(
            name='FlexiblePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('subtitle', models.CharField(blank=True, default='', max_length=255, verbose_name='subtitle')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('link_title', models.CharField(blank=True, default='', max_length=255, verbose_name='link title')),
                ('excerpt', models.TextField(blank=True, help_text='Optional. A short summary of the content to be used in previews and links. Optimal length is 200 characters', verbose_name='excerpt')),
                ('content', wagtail.fields.StreamField([('body_text', 8), ('detail', 13)], block_lookup={0: ('wagtail.blocks.RichTextBlock', (), {'features': ['h2', 'h3', 'h4', 'h5', 'h6', 'bold', 'italic', 'ol', 'ul', 'hr', 'link'], 'help_text': 'Rich text with headings, paragraph formatting, lists and links', 'icon': 'pilcrow', 'label': 'Paragraph', 'required': False, 'template': 'nest/blocks/rich_text.html'}), 1: ('wagtail.blocks.BlockQuoteBlock', (), {'help_text': 'The quotation text', 'label': 'Quote', 'max_length': 255, 'required': True}), 2: ('wagtail.blocks.CharBlock', (), {'help_text': 'Optional. The name of the author the quote is taken from', 'label': 'Author', 'max_length': 255, 'required': False}), 3: ('wagtail.blocks.StructBlock', [[('quote', 1), ('author', 2)]], {}), 4: ('wagtail.images.blocks.ImageChooserBlock', (), {'help_text': 'The image to display in the figure', 'icon': 'image', 'label': 'Image', 'required': True, 'template': 'nest/blocks/image.html'}), 5: ('wagtail.blocks.TextBlock', (), {'help_text': 'Optional. The image caption', 'label': 'Caption', 'required': False}), 6: ('wagtail.blocks.StructBlock', [[('image', 4), ('caption', 5)]], {}), 7: ('wagtail.embeds.blocks.EmbedBlock', (), {'help_text': 'A video embed. Insert a YouTube or Vimeo video link', 'icon': 'media', 'label': 'Video embed', 'required': False, 'template': 'nest/blocks/video_embed.html'}), 8: ('wagtail.blocks.StreamBlock', [[('paragraph', 0), ('quote', 3), ('image_with_caption', 6), ('video_embed', 7)]], {}), 9: ('wagtail.blocks.ChoiceBlock', [], {'choices': [('left', 'Left'), ('right', 'Right')], 'help_text': 'The text alignment. Select to have the text content positioned to left or right'}), 10: ('wagtail.blocks.CharBlock', (), {'help_text': 'The title as it will be seen by the public', 'label': 'Title', 'max_length': 255, 'required': True}), 11: ('wagtail.blocks.TextBlock', (), {'help_text': 'A description as it will be seen by the public', 'label': 'Description', 'required': True}), 12: ('wagtail.images.blocks.ImageChooserBlock', (), {'help_text': 'An image to display. It is recommended a minimum width of 1140px', 'icon': 'image', 'label': 'Image', 'required': True, 'template': 'nest/blocks/image.html'}), 13: ('wagtail.blocks.StructBlock', [[('layout', 9), ('title', 10), ('description', 11), ('image', 12)]], {})}, verbose_name='Content')),
                ('image', models.ForeignKey(blank=True, help_text='Optional. The main image representing the page. It will be used as cover and in links and previews both internal and external, like social media or search engines. Optimal recommended image size is 2400x1600px', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='nest.customimage', verbose_name='image')),
            ],
            options={
                'verbose_name': 'Flexible Page',
                'verbose_name_plural': 'Flexible Pages',
            },
            bases=('wagtailcore.page', models.Model),
        ),
    ]
