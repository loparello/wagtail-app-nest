// -----------------------------------------------------------------------------
// Flex box helper classes
// -----------------------------------------------------------------------------

@use '../abstracts/' as *;
@use 'display';

// Internal variables to generate helper classes
$justify-content: (
  'end': 'flex-end',
  'start': 'flex-start',
  'center': 'center',
  'around': 'space-around',
  'between': 'space-between',
  'initial': initial,
  'inherit': inherit,
);

$align-items: (
  'initial': 'initial',
  'inherit': 'inherit',
  'start': 'flex-start',
  'end': 'flex-end',
  'center': 'center',
  'baseline': 'baseline',
  'stretch': 'stretch',
);

$align-self: (
  'auto': 'auto',
  'initial': 'initial',
  'inherit': 'inherit',
  'start': 'flex-start',
  'end': 'flex-end',
  'center': 'center',
  'baseline': 'baseline',
  'stretch': 'stretch',
);

$align-content: (
  'end': 'flex-end',
  'start': 'flex-start',
  'center': 'center',
  'stretch': 'stretch',
  'around': 'space-around',
  'between': 'space-between',
  'initial': initial,
  'inherit': inherit,
);

$wrap: (
  'wrap': 'wrap',
  'nowrap': 'nowrap',
  'wrap-reverse': 'wrap-reverse',
  'wrap-initail': 'initial',
  'wrap-inherit': 'inherit',
);

$gaps: (
  'xxs': '.5rem',
  'xs': '.75rem',
  'sm': '1rem',
  'md': '1.5rem',
  'lg': '2rem',
  'xl': '3rem',
);

// Flex direction helper classes
.flex-column {
  flex-direction: column !important;
}

.flex-row {
  flex-direction: row !important;
}

.flex-auto {
  flex: 1 0 auto;
}

// Generate multi breakpoint flex classes
@each $size in $breakpoint-sizes {
  @include respond-to(#{$size}) {
    .flex-column-#{$size} {
      flex-direction: column !important;
    }

    .flex-row-#{$size} {
      flex-direction: row !important;
    }

    .flex-auto-#{$size} {
      flex: 1 0 auto !important;
    }
  }
}

@each $key, $value in $gaps {
  .gap-#{$key} {
    gap: #{$value} !important;
  }
}

/* Generate non breakpoint specific helper classes */
@each $key, $value in $justify-content {
  .justify-content-#{$key} {
    justify-content: #{$value} !important;
  }
}

@each $key, $value in $align-self {
  .align-self-#{$key} {
    align-self: #{$value} !important;
  }
}

@each $key, $value in $align-items {
  .align-items-#{$key} {
    align-items: #{$value} !important;
  }
}

@each $key, $value in $align-items {
  .align-items-#{$key} {
    align-items: #{$value} !important;
  }
}

@each $key, $value in $align-content {
  .align-content-#{$key} {
    align-content: #{$value} !important;
  }
}

@each $key, $value in $wrap {
  .flex-#{$key} {
    flex-wrap: #{$value} !important;
  }
}

// Generate multi breakpoint flex justification/alignment helper classes
@each $size in $breakpoint-sizes {
  @include respond-to(#{$size}) {
    @each $key, $value in $justify-content {
      .justify-content-#{$size}-#{$key} {
        justify-content: #{$value} !important;
      }
    }

    @each $key, $value in $align-items {
      .align-items-#{$size}-#{$key} {
        align-items: #{$value} !important;
      }
    }

    @each $key, $value in $align-self {
      .align-self-#{$size}-#{$key} {
        align-self: #{$value} !important;
      }
    }

    @each $key, $value in $align-content {
      .align-content-#{$size}-#{$key} {
        align-content: #{$value} !important;
      }
    }

    @each $key, $value in $wrap {
      .flex-#{$size}-#{$key} {
        flex-wrap: #{$value} !important;
      }
    }
  }
}

// Flex grow helper classes
@for $i from 0 through 12 {
  .flex-grow-#{$i} {
    flex-grow: #{$i};
  }
}

@each $size in $breakpoint-sizes {
  @include respond-to(#{$size}) {
    @for $i from 0 through 12 {
      .flex-grow-#{$size}-#{$i} {
        flex-grow: #{$i};
      }
    }
  }
}

// Flex shrink helper classes
@for $i from 0 through 12 {
  .flex-shrink-#{$i} {
    flex-shrink: #{$i};
  }
}

@each $size in $breakpoint-sizes {
  @include respond-to(#{$size}) {
    @for $i from 0 through 12 {
      .flex-shrink-#{$size}-#{$i} {
        flex-shrink: #{$i};
      }
    }
  }
}

// Flex basis helper classes
@for $i from 0 through 12 {
  .flex-basis-#{$i} {
    flex-basis: #{$i};
  }
}

@each $size in $breakpoint-sizes {
  @include respond-to(#{$size}) {
    @for $i from 0 through 12 {
      .flex-basis-#{$size}-#{$i} {
        flex-basis: #{$i};
      }
    }
  }
}

// Common amalgamations
.d-flex-center {
  @extend .d-flex, .justify-content-center, .align-items-center;
}

.d-flex-between {
  @extend .d-flex, .justify-content-between, .align-items-center;
}

.d-flex-around {
  @extend .d-flex, .justify-content-around, .align-items-center;
}

.d-flex-start {
  @extend .d-flex, .justify-content-start, .align-items-start;
}

.d-flex-center-column {
  @extend .d-flex, .flex-column, .d-flex-center;
}

.d-flex-between-column {
  @extend .d-flex, .flex-column, .justify-content-between, .align-items-center;
}

.d-flex-around-column {
  @extend .d-flex, .flex-column, .justify-content-around, .align-items-center;
}

.d-flex-start-column {
  @extend .d-flex, .flex-column, .justify-content-start, .align-items-start;
}

@for $i from 1 through 12 {
  .flex-#{$i} {
    flex: #{$i};
  }
}

@for $i from 1 through 12 {
  .order-#{$i} {
    order: #{$i};
  }
}

@each $size in $breakpoint-sizes {
  @include respond-to(#{$size}) {
    @for $i from 1 through 12 {
      .order-#{$size}-#{$i} {
        order: #{$i};
      }
    }
  }
}
