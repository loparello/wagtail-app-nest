// -----------------------------------------------------------------------------
// Spacing helper classes
// -----------------------------------------------------------------------------

@use '../abstracts/' as *;

// Internal variables for generating helper classes
$spacings: '0' 0, '1' rem-calc(5), '2' rem-calc(8), '3' rem-calc(12), '4' rem-calc(15), '5' rem-calc(25), '6' rem-calc(30),
  '7' rem-calc(45), '8' rem-calc(60), '9' rem-calc(70);

$margins: (
  'mt': 'margin-top',
  'mr': 'margin-right',
  'mb': 'margin-bottom',
  'ml': 'margin-left',
  'mx': 'horizontal',
  'my': 'vertical',
  'm': 'all',
);

$paddings: (
  'pt': 'padding-top',
  'pr': 'padding-right',
  'pb': 'padding-bottom',
  'pl': 'padding-left',
  'px': 'horizontal',
  'py': 'vertical',
  'p': 'all',
);

// Generate spacing helper classes for all column breakpoints
@mixin spacings($classname, $key, $rule: margin) {
  /// @param {Array} $breakpoint-sizes: from abstracts.variables
  @each $size in $breakpoint-sizes {
    @include respond-to(#{$size}) {
      @each $name, $value in $spacings {
        @if $classname == 'm' {
          .#{$classname}-#{$size}-#{$name} {
            #{$key}: #{$value} !important;
          }
        } @else if $classname == 'p' {
          .#{$classname}-#{$size}-#{$name} {
            #{$key}: #{$value} !important;
          }
        } @else if $classname == 'mx' {
          .#{$classname}-#{$size}-#{$name} {
            #{$key}-left: #{$value} !important;
            #{$key}-right: #{$value} !important;
          }
        } @else if $classname == 'px' {
          .#{$classname}-#{$size}-#{$name} {
            #{$key}-left: #{$value} !important;
            #{$key}-right: #{$value} !important;
          }
        } @else if $classname == 'my' {
          .#{$classname}-#{$size}-#{$name} {
            #{$key}-top: #{$value} !important;
            #{$key}-bottom: #{$value} !important;
          }
        } @else if $classname == 'py' {
          .#{$classname}-#{$size}-#{$name} {
            #{$key}-top: #{$value} !important;
            #{$key}-bottom: #{$value} !important;
          }
        } @else {
          .#{$classname}-#{$size}-#{$name} {
            #{$rule}: #{$value} !important;
          }
        }
      }
    }
  }
}

// Generates non-breakpoint margin helper classes
@each $key, $val in $margins {
  @each $name, $value in $spacings {
    @if $key == 'm' {
      .#{$key}-#{$name} {
        margin: #{$value} !important;
      }
    } @else if $key == 'mx' {
      .#{$key}-#{$name} {
        margin-left: #{$value} !important;
        margin-right: #{$value} !important;
      }
    } @else if $key == 'my' {
      .#{$key}-#{$name} {
        margin-top: #{$value} !important;
        margin-bottom: #{$value} !important;
      }
    } @else {
      .#{$key}-#{$name} {
        #{$val}: #{$value} !important;
      }
    }
  }
}

// Generates non-breakpoint padding helper classes
@each $key, $val in $paddings {
  @each $name, $value in $spacings {
    @if $key == 'p' {
      .#{$key}-#{$name} {
        padding: #{$value} !important;
      }
    } @else if $key == 'px' {
      .#{$key}-#{$name} {
        padding-left: #{$value} !important;
        padding-right: #{$value} !important;
      }
    } @else if $key == 'py' {
      .#{$key}-#{$name} {
        padding-top: #{$value} !important;
        padding-bottom: #{$value} !important;
      }
    } @else {
      .#{$key}-#{$name} {
        #{$val}: #{$value} !important;
      }
    }
  }
}

// Margin classes
@include spacings(mt, margin, margin-top);
@include spacings(mr, margin, margin-right);
@include spacings(mb, margin, margin-bottom);
@include spacings(ml, margin, margin-left);
@include spacings(mx, margin);
@include spacings(my, margin);
@include spacings(m, margin);

// Padding classes
@include spacings(pt, padding, padding-top);
@include spacings(pr, padding, padding-right);
@include spacings(pb, padding, padding-bottom);
@include spacings(pl, padding, padding-left);
@include spacings(px, padding);
@include spacings(py, padding);
@include spacings(p, padding);
