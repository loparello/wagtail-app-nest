// -----------------------------------------------------------------------------
// Application-wide Sass mixins
// -----------------------------------------------------------------------------

@use 'sass:map';
@use 'variables' as global;

// Add standard breakpoint rules */
@mixin respond-to($breakpoint) {
  @if map.has-key(global.$breakpoints, $breakpoint) {
    @media only screen and (min-width: map.get(global.$breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "No value could be retrieved from `#{$breakpoint}`. " + "Available breakpoints are: #{map.keys(global.$breakpoints)}.";
  }
}

// Add down breakpoint rules
@mixin respond-down($breakpoint) {
  @if map.has-key(global.$breakpoints-down, $breakpoint) {
    @media only screen and (max-width: map.get(global.$breakpoints-down, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "No value could be retrieved from `#{$breakpoint}`. " + "Available breakpoints are: #{map.keys(global.$breakpoints)}.";
  }
}

// Adds rules for column width
@mixin col($col-ratio) {
  flex: 0 0 global.$col-unit * $col-ratio;
  max-width: global.$col-unit * $col-ratio;
}

// Creates column classes for a breakpoint: example col-md-6
@mixin cols($breakpoint, $direction: up) {
  @for $i from 1 through global.$num-cols {
    .col-#{$breakpoint}-#{$i} {
      @if ($direction == down) {
        @include respond-down($breakpoint) {
          @include col($i);
        }
      } @else {
        @include respond-to($breakpoint) {
          @include col($i);
        }
      }
    }
  }
}

// Add to links/buttons with a parent with position relative and
// the link will be extended to the parent
@mixin stretched-link {
  &:after {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    z-index: 1;
    content: '';
  }
}

// Add border radius rule
@mixin b-radius($value) {
  border-radius: $value;
}
